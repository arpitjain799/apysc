name: Deploy to PyPI
on:
  push:
    branches:
      - main
jobs:

  SetGlobalConstants:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      PYTHON_36_VERSION: 3.6.15
      PYTHON_37_VERSION: 3.7.12
      PYTHON_38_VERSION: 3.8.12
      PYTHON_39_VERSION: 3.9.9
      PYTHON_310_VERSION: 3.10.0
      CHECKING_BADGE_COLOR: FFAA00
      PASSING_BADGE_COLOR: 0088FF
      RUNNING_OR_FAILING_STATUS: running or failed
      PASSING_STATUS: passing
    steps:
      - run: echo 'Setting constans.'

  CreateCache:
    needs: SetGlobalConstants
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [
          '${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_37_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_38_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_39_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_310_VERSION }}',
        ]
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set the Python version
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set the site package path to the environment variables
        run: python -c "import site; print(f'site-packages-path={site.getsitepackages()[0]}')" >> $GITHUB_ENV
      - name: Set the Python package cache
        uses: actions/cache@v2
        id: pip_cache
        with:
          path: ${{ env.site-packages-path }}
          key: ${{ runner.os }}-pip-${{ env.site-packages-path }}-${{ hashFiles('**/requirements.txt') }}
      - name: Set the build-essential if there is no site-packages cache
        if: steps.pip_cache.outputs.cache-hit != 'true'
        run: sudo apt install build-essential
      - name: Install each Python library if there is no site-packages cache
        if: steps.pip_cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt
      - name: Set the bin cache if there is no site-packages cache
        if: steps.pip_cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python/${{ matrix.python-version }}/x64/bin/
          key: ${{ runner.os }}-bin-cache-${{ env.site-packages-path }}-${{ hashFiles('**/requirements.txt') }}

  UpdateReadmeBadgesToCheckingStatus:
    needs: SetGlobalConstants
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Update each lint badge status to running or failing
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: passing_lints
          LABEL: 'passing lints'
          STATUS: '${{ needs.SetGlobalConstants.outputs.RUNNING_OR_FAILING_STATUS }}'
          COLOR: ${{ needs.SetGlobalConstants.outputs.CHECKING_BADGE_COLOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update the passing unit tests Python versions status
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: passing_unit_test_python_versions
          LABEL: 'passing unit tests Python versions'
          STATUS: '${{ needs.SetGlobalConstants.outputs.RUNNING_OR_FAILING_STATUS }}'
          COLOR: ${{ needs.SetGlobalConstants.outputs.CHECKING_BADGE_COLOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  RunFlake8:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: '${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}'
      - name: Set the flake8 alias
        run: alias flake8=/opt/hostedtoolcache/Python/${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}/x64/bin/flake8
      - name: Run the flake8 command
        run: python run_flake8.py

  RunMypy:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Set the mypy alias
        run: alias mypy=/opt/hostedtoolcache/Python/${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}/x64/bin/mypy
      - name: Run the mypy command
        run: python run_mypy.py

  RunNumdoclint:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Set the numdoclint alias
        run: alias numdoclint=/opt/hostedtoolcache/Python/${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}/x64/bin/numdoclint
      - name: Run the numdoclint command
        run: python run_numdoclint.py

  RunPyright:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Set the Pyright alias
        run: alias pyright=/opt/hostedtoolcache/Python/${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}/x64/bin/pyright
      - name: Run the Pyright command
        run: python run_pyright.py

  RunCheckingApyscTopLevelImporting:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Run the checking command
        run: python check_apysc_top_level_import.py

  RunTestsOnPython36AndSaveCoverageAndPassingNum:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      COVERAGE: ${{ steps.set-coverage.outputs.coverage }}
      PASSING_TESTS_NUM: ${{ steps.set-passing-tests-num.outputs.passing-tests-num }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Set the pytest alias
        run: alias pytest=/opt/hostedtoolcache/Python/${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}/x64/bin/pytest
      - name: Run the test runner command
        run: python run_tests_and_save_coverage_and_num.py
      - name: Set the environment variables from .env file
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .env
      - name: Set the coverage to outputs value
        id: set-coverage
        run: echo '::set-output name=coverage::${{ env.COVERAGE }}'
      - name: Set the passing tests number to outputs value
        id: set-passing-tests-num
        run: echo '::set-output name=passing-tests-num::${{ env.PASSING_TESTS_NUM }}'

  RunTestsOnEachPythonVersion:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [
          '${{ needs.SetGlobalConstants.outputs.PYTHON_37_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_38_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_39_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_310_VERSION }}',
        ]
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set the pytest alias
        run: alias pytest=/opt/hostedtoolcache/Python/${{ matrix.python-version }}/x64/bin/pytest
      - name: Run the test runner command
        run: python run_tests.py

  RunDocTest:
    needs: [CreateCache, SetGlobalConstants]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      PASSING_TESTS_NUM: ${{ steps.set-passing-tests-num.outputs.passing-tests-num }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Set the pytest alias
        run: alias pytest=/opt/hostedtoolcache/Python/${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}/x64/bin/pytest
      - name: Run the doctest runner command
        run: python run_doctest_and_save_passing_num.py
      - name: Set the environment variables from .env file
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .env
      - name: Set the passing tests number to outputs value
        id: set-passing-tests-num
        run: echo '::set-output name=passing-tests-num::${{ env.PASSING_TESTS_NUM }}'

  DeployToPyPI:
    needs: [
      RunFlake8,
      RunMypy,
      RunNumdoclint,
      RunPyright,
      RunCheckingApyscTopLevelImporting,
      RunTestsOnPython36AndSaveCoverageAndPassingNum,
      RunTestsOnEachPythonVersion,
      RunDocTest,
      SetGlobalConstants,
      UpdateReadmeBadgesToCheckingStatus,
    ]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Execute the Python package build
        run: python build.py
      - name: Set the PyPI account setting
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo -e '[pypi]' >> ~/.pypirc
          echo -e "username = ${PYPI_USERNAME}" >> ~/.pypirc
          echo -e "password = ${PYPI_PASSWORD}" >> ~/.pypirc
      - name: Set the twine alias
        run: alias twine=/opt/hostedtoolcache/Python/${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}/x64/bin/twine
      - name: Upload to PyPI
        run: twine upload dist/*

  CreateReleaseNotes:
    needs: [
      RunFlake8,
      RunMypy,
      RunNumdoclint,
      RunPyright,
      RunCheckingApyscTopLevelImporting,
      RunTestsOnPython36AndSaveCoverageAndPassingNum,
      RunTestsOnEachPythonVersion,
      RunDocTest,
      SetGlobalConstants,
      UpdateReadmeBadgesToCheckingStatus,
    ]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}
      - name: Set the apysc version to environment variable
        run: python -c "import apysc; print(f'apysc_version={apysc.__version__}')" >> $GITHUB_ENV
      - name: Create the release note
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.apysc_version }}
          release_name: v${{ env.apysc_version }}
          draft: false
          prerelease: false

  UpdateReadmeBadgesToPassingStatus:
    needs: [
      RunFlake8,
      RunMypy,
      RunNumdoclint,
      RunPyright,
      RunCheckingApyscTopLevelImporting,
      UpdateReadmeBadgesToCheckingStatus,
      RunTestsOnPython36AndSaveCoverageAndPassingNum,
      RunTestsOnEachPythonVersion,
      RunDocTest,
      SetGlobalConstants,
    ]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Update each lint badge status
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: passing_lints
          LABEL: 'passing lints'
          STATUS: 'flake8, mypy, Pyright, numdoclint'
          COLOR: ${{ needs.SetGlobalConstants.outputs.PASSING_BADGE_COLOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update tests line coverage
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: unit_tests_coverage
          LABEL: 'unit tests coverage'
          STATUS: ${{ needs.RunTestsOnPython36AndSaveCoverageAndPassingNum.outputs.COVERAGE }}
          COLOR: ${{ needs.SetGlobalConstants.outputs.PASSING_BADGE_COLOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update the passing unit tests number
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: passing_unit_tests_num
          LABEL: 'passing unit tests number'
          STATUS: ${{ needs.RunTestsOnPython36AndSaveCoverageAndPassingNum.outputs.PASSING_TESTS_NUM }}
          COLOR: ${{ needs.SetGlobalConstants.outputs.PASSING_BADGE_COLOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update the passsing doctests number
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: passing_doctests_num
          LABEL: 'passing doctests number'
          STATUS: ${{ needs.RunDocTest.outputs.PASSING_TESTS_NUM }}
          COLOR: ${{ needs.SetGlobalConstants.outputs.PASSING_BADGE_COLOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update the passing unit tests Python versions status
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: passing_unit_test_python_versions
          LABEL: 'passing unit tests Python versions'
          STATUS: '${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}, ${{ needs.SetGlobalConstants.outputs.PYTHON_37_VERSION }}, ${{ needs.SetGlobalConstants.outputs.PYTHON_38_VERSION }}, ${{ needs.SetGlobalConstants.outputs.PYTHON_39_VERSION }}, ${{ needs.SetGlobalConstants.outputs.PYTHON_310_VERSION }}'
          COLOR: ${{ needs.SetGlobalConstants.outputs.PASSING_BADGE_COLOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  RunPackageInstallingTests:
    needs: [DeployToPyPI, SetGlobalConstants]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [
          '${{ needs.SetGlobalConstants.outputs.PYTHON_36_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_37_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_38_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_39_VERSION }}',
          '${{ needs.SetGlobalConstants.outputs.PYTHON_310_VERSION }}',
        ]
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup the Python dependencies
        uses: ./.github/actions/setup_py_dependencies
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run the package installing and testing script
        run: python install_released_package.py
      - name: Checkout
        uses: actions/checkout@v2
